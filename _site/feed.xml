<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>賈蓋先 の Tech Blog</title>
    <description>Usually about programming, life or anything else that can described in words.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Rails 6.0.0 active_storage</title>
        <description>
          
          前陣子在做某公司初試題目，收到題目時還很開心題目類似自己練習過的小專案。壓根沒想到會碰到一點小麻煩。不過既然現在能輕描淡寫的寫文章紀錄下來，就表示問題最終是解決了，也有一點心得。 What’s the Problem? 現在回想，不知是自己想太多還是該公司出此題目的小用心? 題目要求使用 Rails 6.0.0 以上版本，且必須實作可以上傳多張圖檔功能。 問題呼之欲出，keyword 就是 Rails 6.0.0 以及 上傳多個檔案。簡而言之就是 Rails 6.0 ActiveStorage has_many_attached 情況下，使用 update 更新資料時，預設會覆蓋所有的原圖檔，再上傳新的圖檔。 それはまずいね！(真是太糟糕了~) 小腦補 - ActiveStorage 是 Rails 5.2 後，Rails 支援檔案上傳的功能。可以將檔案上傳至 Google Could Storage, Amazon S3, Microsoft Azure Storage 等雲端儲存服務，也可以在開發或測試環境中搭配 local based-disk service 使用。 The Process 從 Github Rails 可以查到在討論...
        </description>
        <pubDate>Fri, 06 Mar 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-03-06-rails-activestorage/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-03-06-rails-activestorage/</guid>
      </item>
    
      <item>
        <title>Logical Operators with Truthy &amp; Falsey</title>
        <description>
          
          Logical Operators 1. &amp;amp;&amp;amp;, and 只有兩個值皆為 true，才成立。 Ex: true &amp;amp;&amp;amp; true =&amp;gt; true, false &amp;amp;&amp;amp; true =&amp;gt; false 2. ||, or 只要有一個值為 true，就成立並回傳該值。 Ex: false || true =&amp;gt; true, true || false =&amp;gt; true 3. !, not 就是個唱反調的，如果該值為 Truthy，則回傳 false，反之亦然。 Ex: !true =&amp;gt; false, !nil =&amp;gt; true Truthy and Fasley...
        </description>
        <pubDate>Tue, 03 Mar 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-03-03-operators/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-03-03-operators/</guid>
      </item>
    
      <item>
        <title>Truthy &amp; Falsey</title>
        <description>
          
          還記得在第一次面試時，被問了一個這樣的問題：請問 Truthy, Falsey value 在 Ruby 代表什麼? 當時我腦袋突然一片空白，因為從來沒有思考過這個基本到不行，卻是程式邏輯、流程控制的基礎觀念。一陣緊張焦慮後，我試著回答出 布林值 這個答案，嘛～ 回答得很不完整。 之後，面試官便問了幾題加入運算子(operator)與條件語句並建構在此基礎上的程式邏輯判斷，想也知道我回答的哩哩落落，且信心受挫。不過也因為這次，讓我重新體認到基本的重要。 Truthy, Falsey value 是電腦運算、程式語言的邏輯判斷的基礎。 What are Truthy and Falsey values in Ruby? 在 Ruby 中，除 fasle，nil 會被視為 Falsey value 外，其餘的皆被視為是 Truthy value。(僅需記得什麼是 Fasely value 足矣) def truthy_or_falsey(value) if value puts &quot;#{value.inspect} is truthy&quot; else puts &quot;#{value.inspect} is falsey&quot;...
        </description>
        <pubDate>Mon, 02 Mar 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-03-02-truthy-falsey/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-03-02-truthy-falsey/</guid>
      </item>
    
      <item>
        <title>Quack! - Duck Typing</title>
        <description>
          
          前幾篇都在提構成物件導向的特性。除物件導向特性外，Ruby 也是動態型別(Dynamically Typed)的程式語言，蛤!蛤? 啥小朋友… (是的。在學習程式語言時，我大多數時候的第一反應) 但好險，這不在這篇討論範圍，不過遲早要面對 : ) Duck Typing 目前只需知道，Ruby 是動態型別的物件導向程式語言就好，而鴨子型別(Duck Typing)則是為了實現這兩大特性的實踐，也可以說是 Ruby 設計原則。 這裡也不免俗地要引用一行解釋何謂鴨子型別： If it walks like a duck and quacks like a duck, then it must be a duck. 上面這段話，可以綜觀鴨子型別的慨念，接下來我們用 code 翻譯看看， class Duck def quacking puts &quot;quack&quot; end def walking puts &quot;tida tida&quot; end end...
        </description>
        <pubDate>Sat, 29 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-02-29-duck-typing/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-02-29-duck-typing/</guid>
      </item>
    
      <item>
        <title>Module</title>
        <description>
          
          接續上一篇類別(Class), 這篇來説說模組(Module)吧！ Module Module 的起手式： module Skill03 def surf # do something end end 如果還記得 Class 的起手式，會發現，寫起來好像一樣 @@? Module &amp;amp; Class 為了先切割兩者，就先來看看到底 Module &amp;amp; Class 什麼關係? 有什麼差別? Class.superclass =&amp;gt; Module 在 irb 試著輸入這樣，你會發現 Class 的上層是 Module。 那差別呢? Class.instance_method - Mudule.instance_method =&amp;gt; [:allocate, :superclass, :new] Ruby 告訴我們，Class 比 Module 多三個方法，正因為這樣所以 Module...
        </description>
        <pubDate>Tue, 25 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-02-25-module/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-02-25-module/</guid>
      </item>
    
      <item>
        <title>Class</title>
        <description>
          
          在前幾篇都有提到 Ruby 是物件導向程式語言 (Object-oriented programming)。一直提到物件導向，但説到底物件在程式世界到底是什麼? 接下來會花 2-3 篇介紹實現物件導向程式設計的重要元素：類別(Class)、物件(Object)、模組(Module) Class 物件(Object) = 狀態(State) + 行為(Behavior) 那物件跟類別的關聯又是如何？ Object has class: 首先，我們可以對物件使用 class 或是 is_a? 判斷屬哪種類別， &quot;string no.1&quot;.class # =&amp;gt; String [2, 5, 6].class # =&amp;gt; Array &quot;string no.1&quot;.is_a?(String) # =&amp;gt; true [2, 5, 6].is_a?(Array) # =&amp;gt; true Class creates object: 在我們將 &quot;string...
        </description>
        <pubDate>Fri, 21 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-02-21-class-module/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-02-21-class-module/</guid>
      </item>
    
      <item>
        <title>Lambda, Proc</title>
        <description>
          
          The devil is in the details. 接續上一篇，這篇將透過 Lambda, Proc 將 block 物件化，以及物件化之後帶來哪些好處，如何使用。 開始之前我們先驗明正身：證明 block 不是物件，所以無法單獨存在 Ruby 中， { puts &quot;This is block&quot; } # =&amp;gt; SyntaxError # 當然也無法指派給變數 block = { puts &quot;This is block&quot; } # =&amp;gt; SyntaxError 驗完正身，可以準備將 block 物件化了。 Proc, Lambda 物化 物件化 block Proc: greeting =...
        </description>
        <pubDate>Wed, 19 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-02-19-lambda-proc/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-02-19-lambda-proc/</guid>
      </item>
    
      <item>
        <title>Block</title>
        <description>
          
          Block Ruby 為物件導向程式語言，幾乎所有東西都是物件，但 Block 卻不是，那 Block 是什麼？ Block 指的是 Code block 程式碼區塊，以 { }, do...end 呈現。通常單行程式碼使用 { }, 多行則使用 do...end。 而在選擇使用 { }, do...end, 會影響程式執行的優先權，像是數學的先乘除後加減規則： p ([*1..10].map { |num| num * 2 }) # { } 優先權高，正常執行 { } 內容 p ([1..10].map) do |num| num * 2 end # 相反地，do...end...
        </description>
        <pubDate>Mon, 17 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-02-17-block/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-02-17-block/</guid>
      </item>
    
      <item>
        <title>Compare Symbol to String</title>
        <description>
          
          趁著再釐清觀念，打一篇加深自己的印象，順便整理一下學習隨筆。其實，龍哥在上課期間就不斷強調的是學習過程中必須去思考 “這個是什麼”、“為什麼要使用?”、 “什麼時候使用”、“使用了有什麼好處”。 所以思緒脈絡大致會遵循這幾個原則撩落去～ 什麼是 String (字串) 什麼是 Symbol (符號)? 在 Ruby 裡, String (字串), Symbol (符號) 都是 Class (類別) 的一種。下面使用class這個方法驗證。 String : A string object typically representing characters. 白話：任何以單引號或雙引號包起來的，在 Ruby 裡就是字串。例如：&quot;cube&quot;, 'cube' 甚至是 &quot;:)&quot; &amp;gt;&amp;gt; &quot;cube&quot;.class &amp;gt;&amp;gt;'cube'.class &amp;gt;&amp;gt; &quot;:)&quot;.class =&amp;gt; String # 類別都是 String Symbol: Symbol object represents names...
        </description>
        <pubDate>Thu, 13 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-02-13-string-symbol/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-02-13-string-symbol/</guid>
      </item>
    
      <item>
        <title>Blogging with Jekyll on Github Pages</title>
        <description>
          
          This blog is built by Jekyll on Github Pages. What is Jekyll? Jekyll is a static website generator, which can transform plain text into static site without a database and a server. Sounds great, right?! Jekyll is written by Ruby, so it’s literally a Ruby gem, like Rails, Sinatra… and...
        </description>
        <pubDate>Wed, 12 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-02-12-blogging-with-jekyll/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-02-12-blogging-with-jekyll/</guid>
      </item>
    
      <item>
        <title>A spark</title>
        <description>
          
          A single spark can start a prairie fire Just 3 months ago, I was so called a ‘Muggle’ in programming. Then, I had a chance to get to learn my first programming language Ruby in Astro Camp, a full-stack coding bootcamp. At the end of the day, we as a...
        </description>
        <pubDate>Tue, 11 Feb 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-02-11-a-spark/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-02-11-a-spark/</guid>
      </item>
    
      <item>
        <title>Test markdown</title>
        <description>
          Each post also has a subtitle - 
          You can write regular markdown here and Jekyll will automatically convert it to a nice webpage. I strongly encourage you to take 5 minutes to learn how to write in markdown - it’ll teach you how to transform regular text into bold/italics/headings/tables/etc. Here is some bold text Here is a...
        </description>
        <pubDate>Sat, 28 Feb 2015 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2015-02-28-test-markdown/</link>
        <guid isPermaLink="true">http://localhost:4000/2015-02-28-test-markdown/</guid>
      </item>
    
  </channel>
</rss>
